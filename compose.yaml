x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2024-07-13T01-46-15Z
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: nifle
    MINIO_ROOT_PASSWORD: niflepassworD12
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5
  networks:
    - prod

x-worker-pixelizer-common: &worker-common-pixelizer
  build:
    context: ./worker
  restart: always
  networks:
    - prod
  depends_on:
    kafka:
      condition: service_started

services:
  server:
    container_name: "server"
    restart: always
    build:
      context: ./service
    port:
      - 8000:8000
    depends_on:
      db: 
        condition: service_healthy
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
      nginx:
        condition: service_started
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - prod

  worker1:
    <<: *worker-common-pixelizer
    container_name: worker1
  
  worker2:
    <<: *worker-common-pixelizer
    container_name: worker2

  db:
    container_name: "postgres"
    image: postgres:12.19-bullseye
    restart: always
    environment:
      - POSTGRES_DB=pixelizer
      - POSTGRES_USER=nifle
      - POSTGRES_PASSWORD=niflepassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "nifle", "-d", "pixelizer"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s 
    networks:
      - prod 
    expose:
      - 5432
    volumes:
      - db_data:/var/lib/postgresql
    

  minio1:
    <<: *minio-common
    container_name: "minio1"
    volumes:
      - minio11_data:/data1
      - minio12_data:/data2

  minio2:
    <<: *minio-common
    container_name: "minio2"
    volumes:
      - minio21_data:/data1
      - minio22_data:/data2

  nginx:
    container_name: "nginx_reverse_for_minio"
    image: nginx:1.19.2-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 9000:9000
      - 9001:9001
    depends_on:
      - minio1
      - minio2
    networks:
      - prod

  redis: 
    container_name: "redis"
    image: redis:7.2-bookworm
    environment:
      - REDIS_PASSWORD=qwe
      - REDIS_USER=nifle
      - REDIS_USER_PASSWORD=niflepass
    expose:
      - 6379
    volumes:
      - redis_data:/data
    networks:
      - prod
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass niflepass" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user nifle on >niflepass ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "niflepass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  keycloak:
    container_name: "keycloak"
    image: quay.io/keycloak/keycloak:23.0.6
    networks:
      - prod
    depends_on:
      keycloak_db:
        condition: service_healthy
    command: start
    ports:
      - 8080:8080
    restart: always
    environment:
      - KC_HOSTNAME=keycloak
      - KC_HOSTNAME_PORT=8080
      - KC_HOSTNAME_STRICT_BACKCHANNEL=false
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HEALTH_ENABLED=true
      - KEYCLOAK_ADMIN=nifle
      - KEYCLOAK_ADMIN_PASSWORD=niflepassword
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak_db:5433/keycloak
      - KC_DB_USERNAME=nifle
      - KC_DB_PASSWORD=niflepassword
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 5s
      timeout: 5s
      retries: 3

  keycloak_db:
    container_name: "keycloak_db"
    image: postgres:12.19-bullseye
    restart: always
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=nifle
      - POSTGRES_PASSWORD=niflepassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "nifle", "-d", "pixelizer"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s 
    networks:
      - prod 
    expose:
      - 5433
    volumes:
      - keycloak_db_data:/var/lib/postgresql

  zookeeper:
    container_name: "zookeper"
    image: confluentinc/cp-zookeeper:7.5.5
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - prod

  kafka:
    image: confluentinc/cp-kafka:7.5.5
    depends_on:
      - zookeeper
    expose:
      - 29092
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - prod

volumes:
  pg_admin_data:
  db_data:
  redis_data:
  minio11_data:
  minio12_data:
  minio21_data:
  minio22_data:
  keycloak_db_data:

networks:
  prod:
    driver: bridge